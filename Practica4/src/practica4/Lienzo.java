/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practica4;

import java.awt.Graphics;
import java.awt.Point;


/**
 *
 * @author Ainokila
 */
public class Lienzo extends javax.swing.JPanel {

    /**
     * Creates new form Lienzo
     * 
     */
    
    //Herramienta y color activo
    private Herramienta herramienta;
    private Color color;
    private Point inicio;
    private Point fin;
    private boolean relleno;
    private final Point aux_inicio ;
    private final Point aux_fin ;
    
    
    
    public Lienzo() {
        initComponents();
        
        this.herramienta = Herramienta.NINGUNO;
        this.color = Color.NINGUNO;
       
        
        inicio = new Point();
        fin = new Point();
        
        relleno = false;
        
        aux_inicio = new Point();
        aux_fin = new Point();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    //Cuando hacemos click y soltamos para punto
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        inicio = evt.getPoint();
        repaint();

    }//GEN-LAST:event_formMouseClicked

    //Cuando apretamos hacia dentro
    private void formMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseEntered

      
    }//GEN-LAST:event_formMouseEntered

    //Cuando soltamos
    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        fin = evt.getPoint();
        repaint();

    }//GEN-LAST:event_formMouseReleased

    //Cuando presionamos y movemos
    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        fin = evt.getPoint();
        repaint();

    }//GEN-LAST:event_formMouseDragged

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        inicio = fin = evt.getPoint();
        repaint();
    }//GEN-LAST:event_formMousePressed

    
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    public void setHerramienta(Herramienta herramienta){
        this.herramienta=herramienta;
        //System.out.println("Seleccionado " + herramienta.toString());
    }
    
    public void setColor(Color color){
        this.color=color;
        //System.out.println("Seleccionado " + color.toString());

    }
    
    public void cambiaRelleno(boolean relleno){
        this.relleno = relleno;
    }
    
    public void clear(){

       herramienta = Herramienta.NINGUNO;
       repaint();
       
    }
    
    //Sobreescribimos el metodo paint
    @Override
    public void paint(Graphics g){
        super.paint(g);
        g.setColor(color.getColor());      

        switch(herramienta){
            case LINEA:
                g.drawLine(inicio.x, inicio.y, fin.x, fin.y);
                break;
            case LAPIZ:
                //g.drawLine(inicio.x, inicio.y, inicio.x, inicio.y);
                g.fillOval(inicio.x-5,inicio.y-5, 10, 10);
               
                break;
            case RECTANGULO:
                //ARREGLAR
                calculaInicioFin();
                if(relleno){
                    g.fillRect(aux_inicio.x, aux_inicio.y, aux_fin.x, aux_fin.y);
                }else{
                    g.drawRect(aux_inicio.x, aux_inicio.y, aux_fin.x, aux_fin.y);
                }
                
                
                break;
            case CIRCULO:

                calculaInicioFin();
                if(relleno){
                    g.fillOval(aux_inicio.x, aux_inicio.y, aux_fin.x, aux_fin.y);
                }else{
                    g.drawOval(aux_inicio.x, aux_inicio.y, aux_fin.x, aux_fin.y);
                }
                break;
        }
        
    }
    
    private void calculaInicioFin(){
        

        aux_inicio.x = Math.min(inicio.x,fin.x);
        aux_inicio.y = Math.min(inicio.y,fin.y);

        aux_fin.x = Math.abs(inicio.x - fin.x);
        aux_fin.y = Math.abs(inicio.y - fin.y);
                
                       
    }
    
}
